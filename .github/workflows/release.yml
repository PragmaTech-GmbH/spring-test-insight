name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        type: string
      next_version:
        description: 'Next development version'
        required: false
        type: string
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Configure Git user
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Set release version
        working-directory: spring-test-insight-extension
        run: |
          ./mvnw versions:set -DnewVersion=${{ github.event.inputs.version }} -DgenerateBackupPoms=false
          
      - name: Commit release version
        run: |
          git add .
          git commit -m "chore: release version ${{ github.event.inputs.version }}"
          
      - name: Build and test
        working-directory: spring-test-insight-extension
        run: ./mvnw clean verify
        
      - name: Create staging repository
        id: staging
        working-directory: spring-test-insight-extension
        run: |
          ./mvnw nexus-staging:create -DserverId=central-portal \
            -DnexusUrl=https://central.sonatype.com/ \
            -DautoReleaseAfterClose=false
          echo "staging_repository_id=$(./mvnw help:evaluate -Dexpression=stagingRepositoryId -q -DforceStdout)" >> $GITHUB_OUTPUT
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          
      - name: Deploy to staging repository
        working-directory: spring-test-insight-extension
        run: |
          ./mvnw clean deploy -Prelease \
            -DstagingRepositoryId=${{ steps.staging.outputs.staging_repository_id }}
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          
      - name: Release with JReleaser
        working-directory: spring-test-insight-extension
        run: |
          ./mvnw jreleaser:full-release -Djreleaser.dry.run=false
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.MAVEN_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.MAVEN_GPG_SECRET_KEY }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          JRELEASER_NEXUS2_MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          
      - name: Set next development version
        if: ${{ github.event.inputs.next_version != '' }}
        working-directory: spring-test-insight-extension
        run: |
          ./mvnw versions:set -DnewVersion=${{ github.event.inputs.next_version }} -DgenerateBackupPoms=false
          git add .
          git commit -m "chore: prepare next development version ${{ github.event.inputs.next_version }}"
          git push origin main